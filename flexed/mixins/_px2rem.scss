@function rem($pixels, $context: $browser-context) {
    @return #{$pixels/$context}rem;
}

/// This mixin coverts px units to rem with fallback.
///
/// @group utility
///
/// @param {property} $property - css property
///
/// @param {pixel values} $px-values - pixel values
///
/// @example scss - Example
/// .el {
///     @include('font-size', 16px);
/// }
///
/// @example scss - Output
/// .el {
///     font-size: 16px;
///     font-size: 1rem;
/// }
@mixin rem-fallback($property, $px-values) {

    // Convert the baseline into rems
    $baseline-rem: $base-font-size / 1rem * 1;

    // Print the first line in pixel values
    #{$property}: $px-values;

    // If there is only one (numeric) value, return the property/value line for it.
    @if type-of($px-values) == 'number' {
        #{$property}: $px-values / $baseline-rem;
    } @else {

        // Create an empty list that we can dump values into
        $rem-values: ();
        @each $value in $px-values {
            // If the value is zero or not a number, return it
            @if $value == 0 or type-of($value) != 'number' {
                $rem-values: append($rem-values, $value);
            } @else {
                $rem-values: append($rem-values, $value / $baseline-rem);
            }
        }

        // Return the property and its list of converted values
        #{$property}: $rem-values;
    }
}
