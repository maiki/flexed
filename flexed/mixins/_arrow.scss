$arrow-size-default: 20px !default;
$arrow-color-default: #fff !default;

@mixin arrow-helper($arrow-size, $arrow-color, $margin, $side, $align) {
    @if $side == 'top' {
        border-bottom-color: $arrow-color;
        top: -2 * $arrow-size;
    }
    @if $side == 'bottom' {
        border-top-color: $arrow-color;
        bottom: -2 * $arrow-size;
    }
    @if $side == 'left' {
        border-right-color: $arrow-color;
        left: -2 * $arrow-size;
    }
    @if $side == 'right' {
        border-left-color: $arrow-color;
        right: -2 * $arrow-size;
    }
    @if $side == 'right' or $side == 'left' {
        @if $align == 'center' {
            top: 50%;
            margin-top: -$arrow-size;
        } @else if $align == 'top' {
            top: $margin;
        } @else if $align == 'bottom' {
            bottom: $margin;
        }
    }
    @if $side == 'bottom' or $side == 'top' {
        @if $align == 'center' {
            right: 50%;
            margin-right: -$arrow-size;
        } @else if $align == 'left' {
            left: $margin;
        } @else if $align == 'right' {
            right: $margin;
        }
    }
}


/// Mixin for creating arrows.
/// This mixin font-face declarations for custom fonts.
///
/// @group utility
///
/// @param {side} $side [right] - right, left, top or bottom
///
/// @param {align} $align [center] - center, top, bottom, left, right
///
/// @param {size} $size [20px] - Arrow size
///
/// @param {color} $color [#fff] - Arrow color
///
/// @param {border-color} $border-color [none] - Border color (optional)
///
/// @param {border-size} $border-size [1px] - Border size (optional)
///
/// @example scss - Example
///    .foo {
///       @include arrow('top', 'left', 10px, #eee, #4fade3, 6px);
///    }
///
/// @example scss - Output
///   .foo:after, .foo:before {
///        border: solid transparent;
///        content: " ";
///        height: 0;
///        width: 0;
///        position: absolute;
///        pointer-events: none;
///        visibility: visible;
///    }
///    .foo:after {
///        border-width: 10px;
///        border-bottom-color: #eee;
///        top: -20px;
///        left: 10px;
///    }
///    .foo:before {
///        border-width: 16px;
///        border-bottom-color: #4fade3;
///        top: -32px;
///        left: 4px;
///    }
@mixin arrow($side: 'right', $align: 'center', $size: $arrow-size-default, $color: $arrow-color-default, $border-color: 'none', $border-size: 1px) {
    $selector: '&:after, &:before';
    @if $border-color == 'none' {
        $selector: '&:after';
    }
    #{$selector} {
        border: solid transparent;
        content: ' ';
        height: 0;
        width: 0;
        position: absolute;
        pointer-events: none;
        visibility: visible;
    }
    &::after {
        border-width: $size;
        @include arrow-helper($size, $color, $size, $side, $align);
    }
    @if $border-color != 'none' {
        &::before {
            border-width: $border-size + $size;
            @include arrow-helper($size + $border-size, $border-color, $size - $border-size, $side, $align);
        }
    }
}
